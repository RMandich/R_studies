deck2 <- shuffle(cards = deck)
deal(deck2)
deal(deck)
deal(cards = deck)
deal()
shuffle(cards = deck)
deal(cards = deck)
deal <- function(cards){
cards[1,]
}
deal()
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
shuffle(cards = deck)
deal(cards = deck)
deck2 <- shuffle(cards = deck)
deal(cards = deck2)
deal <- function(cards){
cards[1,]
}
deal()
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
shuffle(cards = deck)
deal(cards = deck)
deck2 <- shuffle(cards = deck)
deal(cards = deck2)
deal()
mean(deck$value)
deck3$value [c(13, 26, 39, 52)]
deck3 <- deck
deck3$value [c(13, 26, 39, 52)]
deck3 <- deck
deck3$value [c(13, 26, 39, 52)] <- c(14,14,14,14)
head(deck3, 13)
deck3 <- shuffle(deck)
deck3
deck3$face == ace
deck3$face == 'ace'
deck3$value[deck3$face == 'ace'] <-14
deck3$value
deck4 <- deck
deck4$value <- 0
head(deck4)
deck4$value[deck4$suit == 'hearts'] <- 1
deck4
deck4$value[deck4$face == 'queen' & deck4$suit = 'spades'] <- 13
deck4$value[deck4$face == 'queen' & deck4$suit == 'spades'] <- 13
deck4
deck5 <- deck
facecard <- deck5$face %in% c('king', 'queen', 'jack')
deck5$value[facecard] <- 10
deck5
deck5$value[deck5$face == 'ace'] <- NA
deck5
lybrary(pryr)
library(pryr)
package.install(pryr)
install.packages(pryr)
environment()
show_env()
environment(deal)
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal()
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal()
shuffle <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
rm(deck)
deck <- read.csv("~/hands_on_R/deck.csv")
View(deck)
setup <- function(deck) {
DECK <- deck
setup()
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
}
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
setup()
cards <- setup(deck)
cards
cards()
-1
end
setup()
deck3 <- deck
shuffle <- cards$shuffle
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
as.environment('package.stats')
as.environment('package:stats')
globalenv()
parent.env(globalenv)
parent.env(globalenv())
ls(globalenv())
environment()
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
show_env()
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
score <- function(symbols) {
#Case Creation
same <- symbols[1] == symbols [2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#Case Identification and prize attribution
if (same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if ( all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == 'C')
prize <- c(0, 2, 5)[cherries + 1]
}
#Accounting for Diamonds
diamonds <- sum(symbols == 'DD')
prize * 2 ^ diamonds
}
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play <- function() {
#Calls the previously defined functions
symbols <- get_symbols()
prize <- score(symbols)
attr(prize, 'symbols') <- symbols
prize
}
play()
play <- function() {
symbols <- get_symbols()
structure(score(symbols), symbols = symbols)
}
play()
slot_display <- function(prize){
# extract symbols
symbols <- attr(prize, "symbols")
# collapse symbols into single string
symbols <- paste(symbols, collapse = " ")
# combine symbol with prize as a character string
# \n is special escape sequence for a new line (i.e. return or enter)
string <- paste(symbols, prize, sep = "\n$")
# display character string in console without quotes
cat(string)
}
slot_display()
slot_display(one_play)
one_play <- play()
slot_display(one_play)
print.slots <- function(x, ...) {
slot_display(x)
}
one_play()
one_play
class(one_play) <- "slots"
one_play
play <- function() {
symbols <- get_symbols()
structure(score(symbols), symbols = symbols, class = 'slots'
}
play <- function() {
symbols <- get_symbols()
structure(score(symbols), symbols = symbols, class = 'slots')
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
rolls <- expand.grid(die,die)
rolls
rolls$value <- rolls$Var1 + rolls$Var2
rolls
rolls$prob1 <- prob[rolls$Var1]
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8,
"4" = 1/8, "5" = 1/8, "6" = 3/8)
rolls$prob1 <- prob[rolls$Var1]
rolls
rolls$prob2 <- prob[rolls$Var2]
rolls$prob <- rolls$prob1 * rolls$prob2
sum(rolls$value * rolls$prob)
rolls
#creates a vector with all the possible symbols
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
#expands the symbols to all possible combinations of 3
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
#expands the symbols to all possible combinations of 3
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
#lookup table for the slots probabilities
prob_slots <- c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06,
"BB" = 0.1, "B" = 0.25, "C" = 0.01, "0" = 0.52)
combos$prob1 <- prob_slots[combos$Var1]
combos$prob2 <- prob_slots[combos$Var2]
combos$prob3 <- prob_slots[combos$Var3]
combos
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
sum(combos$prob)
#calculating the prize for each combo
combos$prize <- NA
symbols <- c(combos[1,1], combos[1,2], combos[1,3])
score(symbols)
for (i in 1:nrow(combos)) {
symbols <- c(combos[i,1], combos[i,2], combos[i,3])
combos$prize[i] <- score(symbols)
}
head(combos)
score <- function(symbols) {
#count the number of Diamonds and Cherries
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
#Case Creation
#slots receives the symbols different from DD
slots <- symbols[symbols != "DD"]
#same receives TRUE if slots has only 1 unique value
same <- length(unique(slots)) == 1
#count the number of bars
bars <- slots %in% c("B", "BB", "BBB")
#Case Identification and prize attribution
if (diamonds == 3){
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if ( all(bars)) {
prize <- 5
} else if (cherries > 0) {
prize <- c(0, 2, 5)[cherries + diamonds + 1]
}else{
prize <- 0
}
#Double for each Diamond
prize * 2 ^ diamonds
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
sum(combos$prize * combos$prob)
for (i in 1:nrow(combos)) {
symbols <- c(combos[i,1], combos[i,2], combos[i,3])
combos$prize[i] <- score(symbols)
}
sum(combos$prize * combos$prob)
